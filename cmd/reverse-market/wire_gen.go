// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/reverse-market/backend/pkg/database/postgres"
)

import (
	_ "github.com/reverse-market/backend/doc"
)

// Injectors from wire.go:

func initApp() (*Application, func(), error) {
	mainConfig, err := getConfig()
	if err != nil {
		return nil, nil, err
	}
	mainLoggers := NewLoggers()
	manager := NewJwtManager(mainConfig)
	postgresConfig := NewPostgresConfig(mainConfig)
	pool, cleanup, err := postgres.NewPsqlPool(postgresConfig)
	if err != nil {
		return nil, nil, err
	}
	userRepository := &postgres.UserRepository{
		DB: pool,
	}
	addressRepository := &postgres.AddressRepository{
		DB: pool,
	}
	postgresCategoriesRepository := &postgres.CategoriesRepository{
		DB: pool,
	}
	postgresTagsRepository := &postgres.TagsRepository{
		DB: pool,
	}
	postgresRequestsRepository := &postgres.RequestsRepository{
		DB: pool,
	}
	postgresProposalsRepository := &postgres.ProposalsRepository{
		DB: pool,
	}
	application := &Application{
		config:     mainConfig,
		loggers:    mainLoggers,
		tokens:     manager,
		users:      userRepository,
		addresses:  addressRepository,
		categories: postgresCategoriesRepository,
		tags:       postgresTagsRepository,
		requests:   postgresRequestsRepository,
		proposals:  postgresProposalsRepository,
	}
	return application, func() {
		cleanup()
	}, nil
}

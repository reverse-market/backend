// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/reverse-market/backend/pkg/database/postgres"
	"github.com/reverse-market/backend/pkg/database/redis"
	"github.com/reverse-market/backend/pkg/idtoken"
	"github.com/reverse-market/backend/pkg/log"
)

// Injectors from wire.go:

func initApp() (*Application, func(), error) {
	mainConfig, err := getConfig()
	if err != nil {
		return nil, nil, err
	}
	logLoggers := log.NewLoggers()
	parser := &idtoken.Parser{}
	manager := NewJwtManager(mainConfig)
	redisConfig := NewRedisConfig(mainConfig)
	pool, cleanup := redis.NewRedisPool(redisConfig, logLoggers)
	refreshTokenRepository, cleanup2 := redis.NewRefreshTokenRepository(pool, redisConfig, logLoggers)
	postgresConfig := NewPostgresConfig(mainConfig)
	pgxpoolPool, cleanup3, err := postgres.NewPsqlPool(postgresConfig)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	userRepository := &postgres.UserRepository{
		DB: pgxpoolPool,
	}
	addressRepository := &postgres.AddressRepository{
		DB: pgxpoolPool,
	}
	postgresCategoriesRepository := &postgres.CategoriesRepository{
		DB: pgxpoolPool,
	}
	postgresTagsRepository := &postgres.TagsRepository{
		DB: pgxpoolPool,
	}
	postgresRequestsRepository := &postgres.RequestsRepository{
		DB: pgxpoolPool,
	}
	postgresProposalsRepository := &postgres.ProposalsRepository{
		DB: pgxpoolPool,
	}
	reader := NewRandSource(mainConfig)
	application := &Application{
		config:        mainConfig,
		loggers:       logLoggers,
		parser:        parser,
		tokens:        manager,
		refreshTokens: refreshTokenRepository,
		users:         userRepository,
		addresses:     addressRepository,
		categories:    postgresCategoriesRepository,
		tags:          postgresTagsRepository,
		requests:      postgresRequestsRepository,
		proposals:     postgresProposalsRepository,
		randSource:    reader,
	}
	return application, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
